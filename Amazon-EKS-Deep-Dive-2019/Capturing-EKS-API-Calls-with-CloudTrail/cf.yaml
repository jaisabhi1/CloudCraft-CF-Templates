AWSTemplateFormatVersion: '2010-09-09'

Description: 'EKS VPC'

Resources:

  # We're going to create everything *except* the actual cluster. The student
  # will create the control plane (cluster) and observe the API activity in CloudTrail
  
  # ControlPlane:
  #   Type: AWS::EKS::Cluster
  #   Properties:
  #     Name: EKSDeepDive
  #     ResourcesVpcConfig:
  #       SecurityGroupIds:
  #         - !Ref 'ControlPlaneSecurityGroup'
  #       SubnetIds:
  #         - !Ref 'SubnetPublicUSEAST1D'
  #         - !Ref 'SubnetPublicUSEAST1F'
  #         - !Ref 'SubnetPrivateUSEAST1F'
  #         - !Ref 'SubnetPrivateUSEAST1D'
  #     RoleArn: !GetAtt 'ServiceRole.Arn'
  #     Version: '1.11'

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker node groups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: !Ref 'VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATIP.AllocationId'
      SubnetId: !Ref 'SubnetPublicUSEAST1D'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'

  NATIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PolicyCloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: !Sub '${AWS::StackName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref 'ServiceRole'

  PolicyNLB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - elasticloadbalancing:*
              - ec2:CreateSecurityGroup
              - ec2:Describe*
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: !Sub '${AWS::StackName}-PolicyNLB'
      Roles:
        - !Ref 'ServiceRole'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable'
      VpcId: !Ref 'VPC'

  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway'
      RouteTableId: !Ref 'PrivateRouteTable'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref 'VPC'

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'

  RouteTableAssociationPrivateUSEAST1D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'SubnetPrivateUSEAST1D'
      
  RouteTableAssociationPrivateUSEAST1F:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'SubnetPrivateUSEAST1F'

  RouteTableAssociationPublicUSEAST1D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'SubnetPublicUSEAST1D'

  RouteTableAssociationPublicUSEAST1F:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'SubnetPublicUSEAST1F'

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  SubnetPrivateUSEAST1D:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1d
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateUSEAST1D'
      VpcId: !Ref 'VPC'

  SubnetPrivateUSEAST1F:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 192.168.64.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateUSEAST1F'
      VpcId: !Ref 'VPC'

  SubnetPublicUSEAST1D:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1d
      CidrBlock: 192.168.32.0/19
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicUSEAST1D'
      VpcId: !Ref 'VPC'

  SubnetPublicUSEAST1F:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1f
      CidrBlock: 192.168.0.0/19
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicUSEAST1F'
      VpcId: !Ref 'VPC'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
      
# Outputs:
#   ARN:
#     Export:
#       Name: !Sub '${AWS::StackName}::ARN'
#     Value: !GetAtt 'ControlPlane.Arn'
#   CertificateAuthorityData:
#     Value: !GetAtt 'ControlPlane.CertificateAuthorityData'
#   ClusterStackName:
#     Value: !Ref 'AWS::StackName'
#   Endpoint:
#     Export:
#       Name: !Sub '${AWS::StackName}::Endpoint'
#     Value: !GetAtt 'ControlPlane.Endpoint'
#   SecurityGroup:
#     Export:
#       Name: !Sub '${AWS::StackName}::SecurityGroup'
#     Value: !Join
#       - ','
#       - - !Ref 'ControlPlaneSecurityGroup'
#   SubnetsPrivate:
#     Export:
#       Name: !Sub '${AWS::StackName}::SubnetsPrivate'
#     Value: !Join
#       - ','
#       - - !Ref 'SubnetPrivateUSEAST1F'
#         - !Ref 'SubnetPrivateUSEAST1D'
#   SubnetsPublic:
#     Export:
#       Name: !Sub '${AWS::StackName}::SubnetsPublic'
#     Value: !Join
#       - ','
#       - - !Ref 'SubnetPublicUSEAST1D'
#         - !Ref 'SubnetPublicUSEAST1F'
#   VPC:
#     Export:
#       Name: !Sub '${AWS::StackName}::VPC'
#     Value: !Ref 'VPC'
