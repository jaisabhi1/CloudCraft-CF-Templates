{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template deploys a VPC, with a public subnet. It deploys an Internet Gateway, with a default route on the public subnet. It deploys an EC2 instance in the public subnet to serve as a bastion host.",
    "Parameters": {
        "EnvironmentName": {
            "Description": "An environment name that will be prefixed to resource names",
            "Type": "String",
            "Default": "Bastion"
        },
        "VpcCIDR": {
            "Description": "Please enter the IP range (CIDR notation) for this VPC",
            "Type": "String",
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.192.0.0/16"
        },
        "PublicSubnetCIDR": {
            "Description": "Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
            "Type": "String",
            "AllowedPattern": "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}",
            "Default": "10.192.10.0/24"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCIDR"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Ref": "PublicSubnetCIDR"
                },
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${EnvironmentName} Public Subnet (AZ1)"
                        }
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${EnvironmentName} Public Routes"
                        }
                    }
                ]
            }
        },
        "DefaultPublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            }
        },
        "NoIngressSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "no-ingress-sg",
                "GroupDescription": "Security group with no ingress rule",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "%ami-43%",
                "InstanceType": "t2.micro",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "DeviceIndex": "0",
                        "DeleteOnTermination": true,
                        "SubnetId": {
                            "Ref": "PublicSubnet"
                        },
                        "GroupSet": [
                            {
                                "Ref": "InstanceSecurityGroup"
                            }
                        ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\nset -x\n/bin/echo '%password%' | /bin/passwd cloud_user --stdin\nyum update -y\nyum install -y git jq\npip install --upgrade awscli\ncurl --silent \"https://raw.githubusercontent.com/linuxacademy/eks-deep-dive-2019/master/3-LA1-Autoscaling/asg-policy.json\" -o /home/cloud_user/asg-policy.json\nchown cloud_user:cloud_user /home/cloud_user/asg-policy.json\ncurl --silent \"https://raw.githubusercontent.com/linuxacademy/eks-deep-dive-2019/master/3-LA1-Autoscaling/cluster_autoscaler.yaml\" -o /home/cloud_user/cluster_autoscaler.yaml\nchown cloud_user:cloud_user /home/cloud_user/cluster_autoscaler.yaml\ncurl --silent \"https://raw.githubusercontent.com/linuxacademy/eks-deep-dive-2019/master/3-LA1-Autoscaling/nginx.yaml\" -o /home/cloud_user/nginx.yaml\nchown cloud_user:cloud_user /home/cloud_user/nginx.yaml\ncurl --silent --location \"https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_linux_amd64.tar.gz\" | tar xz -C /tmp\nmv /tmp/eksctl /usr/local/bin\ncurl --silent -O \"https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv ./kubectl /usr/local/bin\ncurl --silent -O \"https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator\"\nchmod +x ./aws-iam-authenticator\nmv ./aws-iam-authenticator /usr/local/bin\nmkdir -p /home/cloud_user/.aws\ntouch /home/cloud_user/.aws/config\necho \"[default]\" >> /home/cloud_user/.aws/config\necho \"region = us-east-1\" >> /home/cloud_user/.aws/config\ntouch /home/cloud_user/.aws/credentials\necho \"[default]\" >> /home/cloud_user/.aws/credentials\necho \"aws_access_key_id = ${AccessKey}\" >> /home/cloud_user/.aws/credentials\necho \"aws_secret_access_key = ${AccessKey.SecretAccessKey}\" >> /home/cloud_user/.aws/credentials\nchown cloud_user:cloud_user /home/cloud_user/.aws/config\nchmod 600 /home/cloud_user/.aws/config\nchown cloud_user:cloud_user /home/cloud_user/.aws/credentials\nchmod 600 /home/cloud_user/.aws/credentials\nexport PATH=/usr/local/bin:$PATH\necho \"WaitHandle: ${WaitHandle}\"\nAWS_ACCESS_KEY_ID=${AccessKey} AWS_SECRET_ACCESS_KEY=${AccessKey.SecretAccessKey} AWS_REGION=us-east-1 /usr/local/bin/eksctl create cluster --region=us-east-1 --node-type=t2.medium --verbose=4 >> /var/log/eksctl.log 2>&1\nmkdir -p /home/cloud_user/.kube\ncp /.kube/config /home/cloud_user/.kube\nchown -R cloud_user:cloud_user /home/cloud_user/.kube\nchmod 600 /home/cloud_user/.kube/config\n/opt/aws/bin/cfn-signal -e 0 -r \"eksctl complete\" '${WaitHandle}'\n"
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Bastion Host"
                    }
                ]
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "EC2Instance",
            "Properties": {
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "AccessKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": "cloud_user"
            }
        }
    },
    "Outputs": {
        "pubIpAddress1": {
            "Description": "Public IP address of Bastion Host",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "PublicIp"
                ]
            }
        },
        "pubIpAddress2": {
            "Description": "cloud_user Access Key",
            "Value": {
                "Ref": "AccessKey"
            }
        },
        "pubIpAddress3": {
            "Description": "cloud_user Secret Access Key",
            "Value": {
                "Fn::GetAtt": [
                    "AccessKey",
                    "SecretAccessKey"
                ]
            }
        }
    }
}